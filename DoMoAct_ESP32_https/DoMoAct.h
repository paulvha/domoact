/**
  Written by Paulvha January 2024
  Released under MIT licence.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
  even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files.

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  ===========//================//===========//================//=============//=============

    Different system variables which are used on different places.

    Timezone info from
    https://werner.rothschopf.net/microcontroller/202103_arduino_esp32_ntp_en.htm
*/
//==========================================================================//
////////////////  USER MUST WIFI parameters //////////////////////////////////
#define SECRET_SSID "*" //network name
#define SECRET_PASS "*" //network password

/////////////// USER MUST location parameters ////////////////////////////////
// To set the right time and sunrise/sunset update these parameters
// You have to change the time zone to your local one.
float const LATITUDE  = 52.362083703528384;   // obtain the right values with Google maps(see manual)
float const LONGITUDE = 4.891125827475844;
#define UTC_OFFSET 1                          // local time delta to UTC, needed to TimeLord

// choose your time zone from this list
// https://github.com/nayarsystems/posix_tz_db/blob/master/zones.csv
// below is Europe / Amsterdam
#define MY_TZ "CET-1CEST,M3.5.0/2,M10.5.0/3"

//==========================================================================//
////////////////  USER OPTIONAL DoMoAct Login ////////////////////////////////
// Name or Password can be set to a maximum MAX_CH_LENGTH
// Set MIN_PSWD_LENGTH a bit longer than the real password in order to not give away too much info

//#define DoMoAct_NAME "DoMoAct"// DoMoAct name
//#define DoMoAct_PASS "Test1"  // DoMoAct password

#define DoMoAct_NAME "*"        // DoMoAct name
#define DoMoAct_PASS "*"        // DoMOAct password
#define MIN_PSWD_LENGTH 5       // Only used as length of your password display webMenu (to confuse or help the user)
#define MAX_CH_LENGTH   10      // Max length of either name or password

////////////////  USER OPTIONAL Sensor example and menu ///////////////////////
#define SENSOREXAMPLE 0         // enable sensor example by setting to 1

#if SENSOREXAMPLE == 1          // if sensor example is enabled
#define USERSENSORMENU  1       // if an optional (user defined) menu can also be enabled by setting to 1
#else
#define USERSENSORMENU  0
#endif

////////////////  USER OPTIONAL enable LCD display ///////////////////////
#define ENABLELCD 0              // enable LCD display set to 1

//==========================================================================//
////////////////////// PROGRAM parameters ////////////////////////////////////
#define INPUTDELAY     20       // wait max 20 seconds for serial-menu input
#define CF_NUMGROUPS   5        // max number of groups
#define CF_NUMPORTS    5        // max number of ports
#define CF_NUMSENSORS  5        // max number of sensors
#define CF_NUMDASHBOARD 10      // max number of dashboard items
#define CF_NAMELEN     20       // max namelength port / group / sensor
#define CF_NOTASSIGNED 0xff     // parameters is not assigned
#define CF_IMPORTDELAY 60       // wait max 60 x 500ms = 30 seconds for import
#define TIME_NOTASSIGNED 0xffff // Time is not assigned
#define WEBMENURESET   2        // if more than x minutes since last client connect, reset to start of web menu

// circular buffer
#define CB_MAXENTRIES 50        // max log of changes
#define CB_ENTRYSIZE  35        // max character length of each change

#define CF_VERSION  1.1         // configuration structure version

//////////////////// Port information
struct MyPort{
  uint8_t Gpio;         // GPIO to use
  bool    ActiveHigh;   // true : active is HIGH, false : active is low
  char    Name[CF_NAMELEN];// logical name (like backyard, frontdoor )
  uint8_t On_hour;      // Which hour ON
  uint8_t On_minute;    // Which minute ON
  uint8_t Off_hour;     // Which hour OFF
  uint8_t Off_minute;   // Which minute OFF
  bool    On_sunset;    // true: use on_minute (if set) to switch ON BEFORE before sunset, false: use (On_hour/ On_minute) or Group or sensor
  bool    Off_sunrise;  // true: use off_minute (if set) to switch OFF AFTER sunrise, false: use (Off_hour/ Off_minute) or Group or sensor
  uint8_t Day;          // which weekdays (bit 0 = sunday, 1 = ON, 0 = OFF)
  bool    Enable;       // true = enabled, false = disabled
  uint8_t Group[CF_NUMGROUPS];        // part of a group (0xff Not part of GROUP)

  // reserved for future extension / options
  uint8_t future1;
  uint8_t future2;
  bool    futureb1;
  bool    futureb2;
  float   futuref1;
  float   futuref2;
};
bool PortStatus[CF_NUMPORTS];

//////////////////// group information
struct MyGroups {
  char    Name[CF_NAMELEN];// logical name (like garden, house)
  uint8_t On_hour;      // Which hours ON
  uint8_t On_minute;    // Which minute ON
  uint8_t Off_hour;     // Which hours OFF
  uint8_t Off_minute;   // Which minute OFF
  bool    On_sunset;    // true: use on_minute (if set) to switch ON BEFORE before sunset, false: use On_hour/ On_minute
  bool    Off_sunrise;  // true: use off_minute (if set) to switch OFF AFTER sunrise, false: use Off_hour / Off_minute
  uint8_t Day;          // which weekdays (bit 0 = sunday, 1 = ON, 0 = OFF)
  bool    Enable;       // true = enabled, false = disabled
  uint8_t count;        // number of ports member of this group

  // reserved for future extension / options
  uint8_t future1;
  uint8_t future2;
  bool    futureb1;
  bool    futureb2;
  float   futuref1;
  float   futuref2;
};
bool GroupStatus[CF_NUMGROUPS];

//////////////////// sensor information
struct MySensors {
  char    Name[CF_NAMELEN];   // logical name (like temperature, waterlevel, humidity)
  uint8_t Day;                // which weekdays (bit 0 = sunday, 1 = ON, 0 = OFF)
  bool    Enable;             // true = enabled, false = disabled
  uint8_t Ports[CF_NUMPORTS]; // controlling ports (0xff No port)

  // reserved for sensor usage by the user
  uint8_t UserInt1;
  uint8_t UserInt2;
  bool    UserBool1;
  bool    UserBool2;
  float   UserFloat1;
  float   UserFloat2;
};

#define SENSOR_NOACT 0        // sensor channel actions
#define SENSOR_ON    1
#define SENSOR_OFF   2
#define SENSOR_FLIP  3

volatile byte ChangeSensorStatus[CF_NUMSENSORS];
bool SensorStatus[CF_NUMSENSORS];

// dashboard structure
struct MyDash {
  int PGS;    // port, group or sensor
  int num;    // which number of PGS
};

// structure stored in SPIFFS
struct MyObject {
  float Version;                    // version of DoMoAct
  bool DisplaySwitch;               // enable display switching on Serial and led matrix (if enabled)
  int WebBackground;                // which WebBackground to use (Menu controlled)
  int DST;                          // daylight saving (NOT USED on ESP32)
  MyDash DashBoard[CF_NUMDASHBOARD];// dashboard
  MyPort ports[CF_NUMPORTS];
  MyGroups groups[CF_NUMGROUPS];
  MySensors sensors[CF_NUMSENSORS];
};

// variables for GetFromRTC() to parse the RTC feedback
#define R_DAY    1            // day of month
#define R_MONTH  2
#define R_YEAR   3
#define R_HOUR   4
#define R_MINUTE 5
#define R_SECOND 6
#define R_WDAY   7            // day of week
#define R_DST    8            // get daylight saving 1 = yes, 0 = no

// for enable/disable weekday
#define CF_SUNDAY    0
#define CF_MONDAY    1
#define CF_TUESDAY   2
#define CF_WEDNESDAY 3
#define CF_THURSDAY  4
#define CF_FRIDAY    5
#define CF_SATURDAY  6

// source or distination
#define PORTS   1
#define GROUP  2
#define SENSOR 3

// led matrix display
#define M_NO    0           // no scroll
#define M_LEFT  1           // scroll left
#define M_RIGHT 2           // scroll right
#define M_UP    3           // scroll up
#define M_DOWN  4           // scroll down


// ESP32 only !!
//========================================================//
/* Certificate generated for test on Dec 31 2023 15:37:57 */

uint16_t pkLength = 1192;
unsigned char pkData[] = {
0x30, 0x82, 0x4, 0xA4, 0x2, 0x1, 0x0, 0x2, 0x82, 0x1, 0x1, 0x0, 0x9C, 0x9D, 0x90, 0xAC, 0x89, 0xDD, 0xF, 0x8, 0xF7, 0x34, 0x49, 0xB0, 0xA5, 0x1E, 0x64, 0x36, 0x8B, 0x26, 0x2D, 0xD3, 0x36, 0xCC, 0xD7, 0x5D, 0xDB, 0xBD, 0xF7, 0xDD, 0xFE, 0xB9, 0x74, 0x24, 0xA1, 0x3E, 0x7F, 0xCB, 0x5D, 0x8C, 0x8E, 0x49, 0x97, 0x64, 0x53, 0xE, 0x20, 0xE9, 0x27, 0xDB, 0x68, 0x4, 0x92, 0x1, 0x39, 0x38, 0x3F, 0xE2, 0xEE, 0x30, 0xAC, 0xA4, 0xF0, 0x33, 0xF7, 0xB1, 0xC1, 0xF2, 0x34, 0x4A, 0xEE,
0x36, 0x85, 0x5F, 0xB, 0x45, 0xFF, 0xEA, 0xBE, 0x0, 0x9A, 0x73, 0x80, 0x31, 0xF, 0x95, 0x60, 0xA6, 0xF1, 0x15, 0x89, 0x51, 0x7D, 0xA0, 0xA5, 0xBC, 0x40, 0x58, 0x71, 0x26, 0x41, 0x98, 0xA7, 0x2, 0xB6, 0xE4, 0x72, 0x56, 0xD5, 0x54, 0x98, 0x77, 0x59, 0x33, 0x77, 0x9, 0x51, 0x79, 0x54, 0xCD, 0x9F, 0x9A, 0xCB, 0x4F, 0x6, 0x10, 0x4B, 0xF5, 0x17, 0x28, 0xEB, 0x28, 0x30, 0x2C, 0x58, 0xEF, 0x12, 0x2C, 0xE1, 0x13, 0xD0, 0x27, 0x2C, 0x8, 0x8C, 0x6, 0x41, 0xD5, 0xDC, 0x61, 0x85,
0xC8, 0x63, 0x12, 0x8C, 0xE0, 0x94, 0x6C, 0x1B, 0x88, 0x7C, 0x59, 0xC6, 0xE6, 0x61, 0x60, 0xC7, 0x4C, 0xA4, 0xD, 0x2F, 0x88, 0x9, 0x51, 0x38, 0xD9, 0x49, 0x9B, 0x82, 0x52, 0xB2, 0xBF, 0x82, 0xED, 0x6A, 0x5E, 0xBA, 0x71, 0x78, 0x6A, 0x25, 0xC, 0x6C, 0x23, 0xB7, 0x69, 0xA3, 0x8C, 0x33, 0x90, 0xA0, 0x5F, 0x46, 0x62, 0x71, 0x99, 0x7B, 0x9A, 0x3D, 0xDD, 0x4A, 0xC1, 0x5F, 0x8D, 0x6B, 0x1D, 0x2D, 0x7, 0xCA, 0xF4, 0x71, 0xC7, 0xDC, 0xA, 0x2A, 0x31, 0x3, 0x3, 0x11, 0xC6, 0x5C,
0xF4, 0xFB, 0xF8, 0x3, 0xF7, 0x46, 0x78, 0x71, 0xC3, 0x7C, 0xD3, 0x75, 0x49, 0x8A, 0xC7, 0x6B, 0xC0, 0x85, 0x79, 0x6E, 0xC9, 0x7E, 0xA1, 0xE0, 0xBC, 0x8B, 0x25, 0x2, 0x3, 0x1, 0x0, 0x1, 0x2, 0x82, 0x1, 0x0, 0x10, 0x76, 0xC9, 0xF2, 0x31, 0x6E, 0x1, 0x3A, 0x1E, 0x8E, 0xAB, 0x1E, 0x7C, 0x45, 0x35, 0x20, 0xBC, 0xC1, 0xF, 0x39, 0x30, 0x7E, 0x19, 0x37, 0xDF, 0x35, 0x59, 0xBC, 0xC7, 0x1D, 0xE4, 0xD5, 0x42, 0xF4, 0x28, 0x88, 0xE, 0xF6, 0xB, 0x31, 0x36, 0x4E, 0x90, 0x22,
0xA0, 0x98, 0x12, 0x1E, 0x11, 0x11, 0xC5, 0xED, 0x85, 0xFF, 0xE1, 0x4B, 0x70, 0x61, 0xC2, 0x8C, 0x76, 0x49, 0xE8, 0x44, 0x92, 0x10, 0x6D, 0xA9, 0xE0, 0xDF, 0xEF, 0x66, 0x5D, 0xEF, 0x86, 0x67, 0x3D, 0x81, 0x1F, 0xBB, 0x7B, 0xA2, 0xEC, 0xB1, 0xF5, 0xDE, 0xA6, 0xE2, 0x6E, 0x34, 0x98, 0x61, 0xCE, 0x7A, 0x7B, 0x43, 0x30, 0xE5, 0xE6, 0x28, 0x6F, 0x8A, 0x2C, 0x2, 0xD8, 0xF8, 0x42, 0xE5, 0xE9, 0x3F, 0x46, 0xAB, 0xCF, 0xDC, 0x35, 0x69, 0xED, 0x5D, 0xCE, 0x64, 0xFD, 0xF1, 0x79, 0x40,
0x36, 0x53, 0xF6, 0x12, 0xA7, 0x80, 0x6D, 0x56, 0x79, 0xC7, 0xFA, 0xD9, 0x51, 0xC1, 0xF4, 0x74, 0xA8, 0xDD, 0xC4, 0x3E, 0x8E, 0xBF, 0xF5, 0x59, 0xE7, 0x82, 0x91, 0xB, 0x20, 0xD6, 0x3, 0x72, 0xFE, 0x12, 0xE4, 0xC9, 0x1D, 0x32, 0xCE, 0x36, 0x1D, 0xB8, 0x89, 0x89, 0x78, 0xAE, 0x39, 0x12, 0xE0, 0x3E, 0xE1, 0xF3, 0x6A, 0x3F, 0x6E, 0xC2, 0x94, 0x4F, 0x30, 0x3C, 0x6D, 0x6D, 0xA1, 0xD2, 0x6E, 0x1E, 0x22, 0xE6, 0xCC, 0x86, 0x1F, 0x20, 0x4E, 0x97, 0x80, 0x57, 0xD6, 0x14, 0x49, 0x5B,
0xCA, 0x64, 0xCF, 0xE0, 0xF, 0xDF, 0xDE, 0x67, 0xCF, 0x1A, 0x96, 0x71, 0xF6, 0x6C, 0x10, 0x67, 0xBA, 0x13, 0xC5, 0xB8, 0x78, 0xF4, 0x83, 0x2B, 0x98, 0xB, 0x49, 0xDB, 0x8A, 0x46, 0x1E, 0xAD, 0x6E, 0x9A, 0x9C, 0x7C, 0xE6, 0xA0, 0x71, 0x47, 0x4B, 0x9F, 0xE4, 0x3C, 0xCF, 0x7E, 0x27, 0xD0, 0x33, 0x44, 0x36, 0x51, 0x2, 0x81, 0x81, 0x0, 0xD0, 0x21, 0x53, 0x59, 0x2B, 0xC2, 0xB6, 0x82, 0x92, 0xB1, 0x90, 0xBA, 0xFE, 0xCB, 0x77, 0x53, 0x88, 0x45, 0xDA, 0x0, 0xFB, 0x80, 0xF8, 0x2D,
0x36, 0x9C, 0xE7, 0x6, 0x8, 0xA5, 0x57, 0xF5, 0x2A, 0xDA, 0x51, 0x96, 0x31, 0x63, 0x18, 0x36, 0xBF, 0x9C, 0x4A, 0x24, 0x57, 0x62, 0xAD, 0x45, 0x44, 0x46, 0x63, 0xCA, 0xD1, 0x0, 0x86, 0x4B, 0x41, 0xDD, 0xE5, 0xE8, 0x7, 0x42, 0x27, 0xD1, 0x6E, 0x7, 0xC9, 0x28, 0xF1, 0x14, 0x3B, 0x1A, 0x4F, 0x3E, 0x9, 0x2A, 0xBB, 0xC6, 0x78, 0x4E, 0x4C, 0x3E, 0x41, 0xD6, 0x7C, 0xB1, 0x5, 0xF7, 0xD5, 0x35, 0x62, 0x9B, 0x5A, 0x3F, 0xD6, 0x65, 0x52, 0x8B, 0x52, 0xE1, 0x2B, 0x6C, 0x4A, 0x43,
0x22, 0x5E, 0x1B, 0xF5, 0x2, 0xA0, 0x1E, 0x21, 0xDE, 0x78, 0x4C, 0xFA, 0xD, 0x4B, 0xED, 0x4E, 0xE6, 0x9D, 0xAA, 0x9A, 0x74, 0x74, 0x24, 0x7D, 0x2, 0x81, 0x81, 0x0, 0xC0, 0xA3, 0xF, 0xEB, 0xB7, 0x3, 0x33, 0x64, 0xB9, 0x50, 0x75, 0xB0, 0x3, 0xE7, 0x2F, 0xA0, 0x2A, 0x26, 0x91, 0xD9, 0x66, 0xD4, 0xD2, 0x0, 0x85, 0xC3, 0xFD, 0xEB, 0x7D, 0x1B, 0x8D, 0x9F, 0xC8, 0xC5, 0xE, 0x5D, 0x1A, 0x22, 0x20, 0xD7, 0x43, 0xE1, 0xA6, 0x20, 0x8D, 0xC, 0xA0, 0xF8, 0x77, 0x7F, 0xFF, 0xE2,
0x18, 0x49, 0x22, 0x4A, 0xF5, 0xDA, 0x38, 0xB, 0x79, 0x1F, 0x3A, 0x58, 0xCF, 0x86, 0x8A, 0x80, 0x2D, 0xDA, 0xE, 0x2, 0x87, 0xA0, 0x63, 0x4D, 0x4C, 0x39, 0x93, 0x1A, 0x4A, 0x4C, 0x68, 0xBA, 0xDE, 0xA7, 0x1A, 0x17, 0xA3, 0x54, 0x33, 0x5, 0x40, 0xE, 0xD1, 0x28, 0x5A, 0xD6, 0x74, 0xED, 0xA8, 0x55, 0x1A, 0x9C, 0x25, 0xD0, 0x7F, 0x2, 0x3E, 0x70, 0xE5, 0x8A, 0x24, 0x43, 0xDB, 0xD8, 0x4C, 0x9, 0x66, 0x11, 0xD4, 0xF5, 0x9F, 0x36, 0xDA, 0x29, 0x89, 0xC9, 0x2, 0x81, 0x80, 0x69,
0x61, 0xA6, 0x51, 0xD, 0x1E, 0x3E, 0xC8, 0xE8, 0x3B, 0xAD, 0xFB, 0x70, 0x8D, 0x56, 0xF2, 0xDD, 0x99, 0xF8, 0xA2, 0xEC, 0xB5, 0x45, 0x73, 0xA7, 0x26, 0x54, 0xB7, 0x32, 0x63, 0x7D, 0xA0, 0xAE, 0x3C, 0xF2, 0x78, 0x68, 0xB3, 0x33, 0xC, 0x6D, 0x82, 0x55, 0xEC, 0x6, 0xAE, 0xF8, 0xEA, 0x8C, 0x82, 0x53, 0x7E, 0xDA, 0xCA, 0x38, 0x35, 0x1C, 0xB9, 0x9C, 0xF2, 0x19, 0xD2, 0xBE, 0x54, 0x85, 0x30, 0xBE, 0x2, 0xD3, 0xE6, 0x19, 0x72, 0xDD, 0xD2, 0x9C, 0x53, 0x9D, 0xD6, 0x5, 0xE, 0x27,
0xFE, 0x91, 0xD9, 0x67, 0x33, 0x3E, 0xC1, 0x58, 0x9B, 0xFA, 0x3C, 0x8C, 0xBA, 0xAB, 0xF4, 0x8B, 0x91, 0xED, 0xBA, 0x3, 0x1, 0x86, 0xAC, 0x6D, 0x57, 0x57, 0x32, 0x7C, 0x4C, 0xD4, 0x54, 0xF3, 0xCE, 0xD7, 0xB2, 0xF8, 0x4E, 0x8C, 0x6E, 0x99, 0xC8, 0x15, 0x1C, 0xB5, 0x80, 0x25, 0x5, 0x2, 0x81, 0x81, 0x0, 0x9D, 0x7F, 0xF4, 0xD1, 0x65, 0x55, 0xB1, 0x9C, 0x65, 0xC3, 0x7A, 0x25, 0x8A, 0x5B, 0x67, 0xDE, 0xC, 0xF8, 0x72, 0x1, 0xD, 0x9, 0x6E, 0x15, 0xCD, 0x48, 0x7C, 0x80, 0x20,
0x4E, 0xF9, 0xD1, 0x2D, 0x66, 0xA8, 0x22, 0xC8, 0xEE, 0x24, 0x69, 0xBC, 0x6F, 0x6E, 0xD3, 0x68, 0x5F, 0x6D, 0xF1, 0x18, 0x4B, 0x48, 0x1C, 0x44, 0x7C, 0xEF, 0x13, 0xD8, 0xC5, 0x2D, 0x53, 0x7C, 0x19, 0x63, 0x2C, 0x1F, 0xA8, 0xC1, 0xEE, 0xA1, 0xE, 0x8A, 0xAB, 0xD8, 0xD5, 0xF2, 0xBA, 0xCD, 0x5A, 0xB9, 0x82, 0x22, 0x43, 0x2C, 0xD1, 0xB4, 0x9F, 0x6D, 0x3E, 0xEC, 0x64, 0x38, 0x3E, 0xCF, 0xAC, 0xD, 0xA8, 0x6F, 0xF4, 0xAD, 0xAF, 0x6E, 0x14, 0xFE, 0xE7, 0xB2, 0x27, 0x30, 0xE0, 0xD5,
0xCA, 0x9A, 0x72, 0x2, 0xCA, 0x94, 0xA1, 0xD9, 0x31, 0x4A, 0x9, 0xC4, 0x53, 0x7A, 0x74, 0x6F, 0x94, 0xCC, 0xB9, 0x2, 0x81, 0x81, 0x0, 0x8B, 0x94, 0x43, 0x94, 0x4B, 0x77, 0x2D, 0x11, 0xCB, 0x29, 0x5B, 0x70, 0x68, 0x6, 0x2C, 0xAA, 0xD4, 0x26, 0xB6, 0x49, 0x76, 0x55, 0x8D, 0x7F, 0xC8, 0x87, 0xB5, 0x57, 0xC1, 0x9D, 0x25, 0xDA, 0xEF, 0x23, 0x49, 0x45, 0xC0, 0x6C, 0x98, 0x86, 0x82, 0xAD, 0x47, 0x1B, 0x55, 0xE5, 0xB5, 0x83, 0xB9, 0x82, 0x3A, 0xB8, 0x8E, 0x8B, 0x5F, 0xD6, 0xF1,
0x5, 0xA4, 0xF9, 0x24, 0x7B, 0xD5, 0x6F, 0x2C, 0xFD, 0xD, 0x73, 0x14, 0xF5, 0x9F, 0x10, 0x93, 0x3C, 0x6C, 0xB7, 0x28, 0x9C, 0xC8, 0xB, 0xE3, 0xBD, 0xF2, 0xAC, 0x6D, 0xC8, 0x91, 0x4E, 0xC3, 0x4E, 0xD4, 0x75, 0x42, 0x27, 0x17, 0xEB, 0xB5, 0xC4, 0x3, 0x77, 0x7, 0x22, 0xA6, 0x1, 0x67, 0x65, 0x47, 0x19, 0x3F, 0x86, 0xAB, 0x98, 0xF9, 0xC0, 0x5B, 0x68, 0x18, 0x6F, 0x1, 0xC0, 0xA0, 0xEC, 0x8A, 0xF6, 0x5A, 0x6C, 0xF7, 0x98
};
uint16_t certLength = 781;
unsigned char certData[] = {
0x30, 0x82, 0x3, 0x9, 0x30, 0x82, 0x1, 0xF1, 0xA0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x30, 0xD, 0x6, 0x9, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0xD, 0x1, 0x1, 0xB, 0x5, 0x0, 0x30, 0x3C, 0x31, 0x16, 0x30, 0x14, 0x6, 0x3, 0x55, 0x4, 0x3, 0xC, 0xD, 0x6D, 0x79, 0x65, 0x73, 0x70, 0x33, 0x32, 0x2E, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x31, 0x15, 0x30, 0x13, 0x6, 0x3, 0x55, 0x4, 0xA, 0xC, 0xC, 0x46, 0x61, 0x6E, 0x63, 0x79, 0x43, 0x6F, 0x6D, 0x70, 0x61, 0x6E, 0x79, 0x31,
0xB, 0x30, 0x9, 0x6, 0x3, 0x55, 0x4, 0x6, 0x13, 0x2, 0x44, 0x45, 0x30, 0x1E, 0x17, 0xD, 0x31, 0x39, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x17, 0xD, 0x33, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x30, 0x3C, 0x31, 0x16, 0x30, 0x14, 0x6, 0x3, 0x55, 0x4, 0x3, 0xC, 0xD, 0x6D, 0x79, 0x65, 0x73, 0x70, 0x33, 0x32, 0x2E, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x31, 0x15, 0x30, 0x13, 0x6, 0x3, 0x55, 0x4, 0xA, 0xC,
0xC, 0x46, 0x61, 0x6E, 0x63, 0x79, 0x43, 0x6F, 0x6D, 0x70, 0x61, 0x6E, 0x79, 0x31, 0xB, 0x30, 0x9, 0x6, 0x3, 0x55, 0x4, 0x6, 0x13, 0x2, 0x44, 0x45, 0x30, 0x82, 0x1, 0x22, 0x30, 0xD, 0x6, 0x9, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0xD, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0x82, 0x1, 0xF, 0x0, 0x30, 0x82, 0x1, 0xA, 0x2, 0x82, 0x1, 0x1, 0x0, 0x9C, 0x9D, 0x90, 0xAC, 0x89, 0xDD, 0xF, 0x8, 0xF7, 0x34, 0x49, 0xB0, 0xA5, 0x1E, 0x64, 0x36, 0x8B, 0x26, 0x2D, 0xD3, 0x36,
0xCC, 0xD7, 0x5D, 0xDB, 0xBD, 0xF7, 0xDD, 0xFE, 0xB9, 0x74, 0x24, 0xA1, 0x3E, 0x7F, 0xCB, 0x5D, 0x8C, 0x8E, 0x49, 0x97, 0x64, 0x53, 0xE, 0x20, 0xE9, 0x27, 0xDB, 0x68, 0x4, 0x92, 0x1, 0x39, 0x38, 0x3F, 0xE2, 0xEE, 0x30, 0xAC, 0xA4, 0xF0, 0x33, 0xF7, 0xB1, 0xC1, 0xF2, 0x34, 0x4A, 0xEE, 0x36, 0x85, 0x5F, 0xB, 0x45, 0xFF, 0xEA, 0xBE, 0x0, 0x9A, 0x73, 0x80, 0x31, 0xF, 0x95, 0x60, 0xA6, 0xF1, 0x15, 0x89, 0x51, 0x7D, 0xA0, 0xA5, 0xBC, 0x40, 0x58, 0x71, 0x26, 0x41, 0x98, 0xA7,
0x2, 0xB6, 0xE4, 0x72, 0x56, 0xD5, 0x54, 0x98, 0x77, 0x59, 0x33, 0x77, 0x9, 0x51, 0x79, 0x54, 0xCD, 0x9F, 0x9A, 0xCB, 0x4F, 0x6, 0x10, 0x4B, 0xF5, 0x17, 0x28, 0xEB, 0x28, 0x30, 0x2C, 0x58, 0xEF, 0x12, 0x2C, 0xE1, 0x13, 0xD0, 0x27, 0x2C, 0x8, 0x8C, 0x6, 0x41, 0xD5, 0xDC, 0x61, 0x85, 0xC8, 0x63, 0x12, 0x8C, 0xE0, 0x94, 0x6C, 0x1B, 0x88, 0x7C, 0x59, 0xC6, 0xE6, 0x61, 0x60, 0xC7, 0x4C, 0xA4, 0xD, 0x2F, 0x88, 0x9, 0x51, 0x38, 0xD9, 0x49, 0x9B, 0x82, 0x52, 0xB2, 0xBF, 0x82,
0xED, 0x6A, 0x5E, 0xBA, 0x71, 0x78, 0x6A, 0x25, 0xC, 0x6C, 0x23, 0xB7, 0x69, 0xA3, 0x8C, 0x33, 0x90, 0xA0, 0x5F, 0x46, 0x62, 0x71, 0x99, 0x7B, 0x9A, 0x3D, 0xDD, 0x4A, 0xC1, 0x5F, 0x8D, 0x6B, 0x1D, 0x2D, 0x7, 0xCA, 0xF4, 0x71, 0xC7, 0xDC, 0xA, 0x2A, 0x31, 0x3, 0x3, 0x11, 0xC6, 0x5C, 0xF4, 0xFB, 0xF8, 0x3, 0xF7, 0x46, 0x78, 0x71, 0xC3, 0x7C, 0xD3, 0x75, 0x49, 0x8A, 0xC7, 0x6B, 0xC0, 0x85, 0x79, 0x6E, 0xC9, 0x7E, 0xA1, 0xE0, 0xBC, 0x8B, 0x25, 0x2, 0x3, 0x1, 0x0, 0x1,
0xA3, 0x16, 0x30, 0x14, 0x30, 0x12, 0x6, 0x3, 0x55, 0x1D, 0x13, 0x1, 0x1, 0xFF, 0x4, 0x8, 0x30, 0x6, 0x1, 0x1, 0xFF, 0x2, 0x1, 0x0, 0x30, 0xD, 0x6, 0x9, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0xD, 0x1, 0x1, 0xB, 0x5, 0x0, 0x3, 0x82, 0x1, 0x1, 0x0, 0x4A, 0x16, 0x11, 0xD1, 0x5B, 0x7D, 0x93, 0xC9, 0xDA, 0x58, 0x4C, 0xD8, 0xAE, 0x4C, 0xF8, 0x4E, 0x30, 0x23, 0x89, 0x27, 0x8E, 0x61, 0x7F, 0xE9, 0xE, 0x13, 0xA0, 0x4B, 0x87, 0x8C, 0x85, 0xCB, 0xE3, 0x2, 0xA5, 0xF9,
0xF0, 0x59, 0x25, 0xE, 0x97, 0x97, 0x47, 0xB9, 0x63, 0x6E, 0x9B, 0x55, 0xCB, 0xBF, 0x36, 0xA6, 0x88, 0x4, 0xB3, 0x94, 0x87, 0xFE, 0x40, 0xB5, 0x17, 0xBB, 0xC3, 0x73, 0xCD, 0xA6, 0x56, 0xA5, 0xF4, 0x4B, 0x7A, 0xFF, 0xA1, 0xC1, 0x96, 0x8A, 0x3A, 0x45, 0xBA, 0x7E, 0x6C, 0xDB, 0x95, 0xF3, 0xEA, 0xFC, 0x97, 0x5F, 0x4E, 0xD9, 0x73, 0xC0, 0xC2, 0xD2, 0x8E, 0xD7, 0xC1, 0xD2, 0xBD, 0xE5, 0xED, 0xBC, 0x1E, 0x60, 0x39, 0xC7, 0xF9, 0xDF, 0x9, 0x3C, 0x8F, 0xFF, 0x33, 0x67, 0x26, 0x3E,
0xF4, 0xF, 0xA, 0x15, 0x24, 0xD, 0x46, 0x94, 0x58, 0xDE, 0x6F, 0x4F, 0xF8, 0xA6, 0x90, 0x1D, 0x5A, 0x7B, 0x35, 0xC1, 0x46, 0x2A, 0x75, 0xBB, 0x6F, 0xE9, 0x6A, 0x16, 0x16, 0x71, 0x6F, 0x67, 0x7F, 0x23, 0xBF, 0xAC, 0x5B, 0x87, 0xA0, 0x42, 0xAF, 0x54, 0x40, 0x22, 0x92, 0x1B, 0x6F, 0x7D, 0x80, 0xCD, 0xE1, 0xD, 0xD6, 0x5F, 0x66, 0x0, 0xC2, 0xCD, 0x20, 0x6D, 0x22, 0x6C, 0x2A, 0xE2, 0x92, 0x2F, 0x8A, 0x66, 0x4C, 0x31, 0xA5, 0xE2, 0x32, 0x2D, 0xC0, 0xD1, 0xE3, 0xC0, 0x48, 0x42,
0x4C, 0x8A, 0x71, 0xBA, 0xD9, 0xCE, 0x1F, 0x70, 0x86, 0xE, 0xD4, 0x51, 0x46, 0x77, 0x80, 0x75, 0x84, 0xED, 0x62, 0xCC, 0xD4, 0xBD, 0x16, 0xE2, 0x25, 0x58, 0xBD, 0x6C, 0x38, 0x78, 0xFF, 0xEB, 0xE2, 0x2B, 0xA4, 0xEC, 0xAA, 0x76, 0x3C, 0xC6, 0x45, 0x36, 0xC, 0x67, 0x98, 0x1C, 0xFC, 0x8E, 0x37, 0x2F, 0x51, 0xD9, 0x9D, 0xBA, 0xDD, 0x84, 0x17, 0x2A, 0x9D, 0x3
};
